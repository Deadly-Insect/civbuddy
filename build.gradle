plugins {
    id 'idea'
    //id 'com.moowork.node' version '1.2.0'
    //id 'de.richsource.gradle.plugins.typescript' version '1.8.0'
}

/*
import com.moowork.gradle.node.NodeExtension
import com.moowork.gradle.node.variant.VariantBuilder

node {
    download = true
}

String nodeExecutable()
{
    NodeExtension nodeExt = NodeExtension.get(project)
    return new VariantBuilder(nodeExt).build().nodeExec
}

compileTypeScript {
    compilerExecutable "${nodeExecutable()} node_modules/typescript/lib/tsc.js"
    //outFile = new File(project.buildDir, 'ts/out.js');
    //target = 'ES6';
    sourcemap = true
    noImplicitReturns = true
    allowUnreachableCode = false
    forceConsistentCasingInFileNames = true
    listFiles = true
    dependsOn 'npmInstall'
}
*/

task clean {
    doLast {
        project.buildDir.deleteDir()
    }
}

task runTsc(type: Exec) {
    // TODO works only on Windows:
    commandLine 'cmd', '/c', 'tsc'
    inputs.dir(project.file('src'))
    outputs.dir(new File(project.buildDir, 'ts'))
}

task assemble(type: Copy, dependsOn: tasks.runTsc) {
    destinationDir = new File(project.buildDir, 'dist')
    from 'vendor/openiconic-1.1.0'
    from 'vendor/bootstrap-4.0.0-beta.2'
    from 'vendor/bootswatch-darkly-v4.0.0-beta.2'
    from 'resources'
    into('js') {
        from runTsc.outputs
    }
}

idea.module {
    downloadSources = true;
    excludeDirs += file('.idea');
    excludeDirs += file('_support');
    excludeDirs += file('node_modules');
}
